// Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.vtb.ejb;

import com.vtb.domain.AuthorizedBody;
import com.vtb.domain.BaseRate;
import com.vtb.domain.CommissionType;
import com.vtb.domain.ContractorType;
import com.vtb.domain.DocumentGroup;
import com.vtb.domain.DocumentsType;
import com.vtb.domain.Industry;
import com.vtb.domain.LimitType;
import com.vtb.domain.OpportunityType;
import com.vtb.domain.PatternPaidPercentType;
import com.vtb.domain.PunitiveMeasure;
import com.vtb.domain.RatingType;
import com.vtb.domain.Region;
import com.vtb.domain.StopFactor;
import com.vtb.domain.TargetType;
import com.vtb.exception.MappingException;
import com.vtb.exception.ModelException;
import com.vtb.exception.NoSuchAuthorizedBodyException;
import com.vtb.exception.NoSuchBaseRateException;
import com.vtb.exception.NoSuchCommissionTypeException;
import com.vtb.exception.NoSuchContractorTypeException;
import com.vtb.exception.NoSuchDocumentGroupException;
import com.vtb.exception.NoSuchDocumentsTypeException;
import com.vtb.exception.NoSuchIndustryException;
import com.vtb.exception.NoSuchLimitTypeException;
import com.vtb.exception.NoSuchOpportunityTypeException;
import com.vtb.exception.NoSuchPatternPaidPercentTypeException;
import com.vtb.exception.NoSuchPunitiveMeasureException;
import com.vtb.exception.NoSuchRatingTypeException;
import com.vtb.exception.NoSuchRegionException;
import com.vtb.exception.NoSuchStopFactorException;
import com.vtb.exception.NoSuchTargetTypeException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import java.util.ArrayList;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.Delegate;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;

public class _EJSRemoteStatelessDictionaryActionProcessorFacade_6a25d1ca_Tie extends org.omg.CORBA_2_3.portable.ObjectImpl implements Tie {
    
    private EJSRemoteStatelessDictionaryActionProcessorFacade_6a25d1ca target = null;
    private ORB orb = null;
    
    private static final String[] _type_ids = {
        "RMI:com.vtb.ejb.DictionaryActionProcessorFacade:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000", 
        "RMI:com.ibm.websphere.csi.CSIServant:0000000000000000", 
        "RMI:com.ibm.websphere.csi.TransactionalObject:0000000000000000"
    };
    
    public void setTarget(Remote target) {
        this.target = (EJSRemoteStatelessDictionaryActionProcessorFacade_6a25d1ca) target;
    }
    
    public Remote getTarget() {
        return target;
    }
    
    public org.omg.CORBA.Object thisObject() {
        return this;
    }
    
    public void deactivate() {
        if (orb != null) {
            orb.disconnect(this);
            _set_delegate(null);
        }
    }
    
    public ORB orb() {
        return _orb();
    }
    
    public void orb(ORB orb) {
        orb.connect(this);
    }
    
    public void _set_delegate(Delegate del) {
        super._set_delegate(del);
        if (del != null)
            orb = _orb();
        else
            orb = null;
    }
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public OutputStream _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in = 
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.hashCode()) {
                case -2083676055: 
                    if (method.equals("removeCommissionType")) {
                        return removeCommissionType(in, reply);
                    }
                case -2080577226: 
                    if (method.equals("removePunitiveMeasure")) {
                        return removePunitiveMeasure(in, reply);
                    }
                case -1959631564: 
                    if (method.equals("findOpportunityTypeByKey")) {
                        return findOpportunityTypeByKey(in, reply);
                    }
                case -1886424845: 
                    if (method.equals("removeContractorType")) {
                        return removeContractorType(in, reply);
                    }
                case -1861847842: 
                    if (method.equals("addAuthorizedBody")) {
                        return addAuthorizedBody(in, reply);
                    }
                case -1786774364: 
                    if (method.equals("updateOpportunityType")) {
                        return updateOpportunityType(in, reply);
                    }
                case -1719196814: 
                    if (method.equals("addStopFactor")) {
                        return addStopFactor(in, reply);
                    }
                case -1586201207: 
                    if (method.equals("findBaseRates")) {
                        return findBaseRates(in, reply);
                    }
                case -1550521068: 
                    if (method.equals("_get_EJBHome")) {
                        return _get_EJBHome(in, reply);
                    }
                case -1535258874: 
                    if (method.equals("updateAuthorizedBody")) {
                        return updateAuthorizedBody(in, reply);
                    }
                case -1510175879: 
                    if (method.equals("addPunitiveMeasure")) {
                        return addPunitiveMeasure(in, reply);
                    }
                case -1467295102: 
                    if (method.equals("removeIndustry")) {
                        return removeIndustry(in, reply);
                    }
                case -1381597679: 
                    if (method.equals("findIndustryByKey")) {
                        return findIndustryByKey(in, reply);
                    }
                case -1375848322: 
                    if (method.equals("findBaseRateByKey")) {
                        return findBaseRateByKey(in, reply);
                    }
                case -1345080628: 
                    if (method.equals("updateLimitType")) {
                        return updateLimitType(in, reply);
                    }
                case -1227100249: 
                    if (method.equals("findPunitiveMeasureByKey")) {
                        return findPunitiveMeasureByKey(in, reply);
                    }
                case -1168859621: 
                    if (method.equals("removeRatingType")) {
                        return removeRatingType(in, reply);
                    }
                case -1143114268: 
                    if (method.equals("findTargetTypeByKey")) {
                        return findTargetTypeByKey(in, reply);
                    }
                case -1049427957: 
                    if (method.equals("findContractorTypes")) {
                        return findContractorTypes(in, reply);
                    }
                case -1011244123: 
                    if (method.equals("_get_primaryKey")) {
                        return _get_primaryKey(in, reply);
                    }
                case -997207366: 
                    if (method.equals("findDocumentsTypes")) {
                        return findDocumentsTypes(in, reply);
                    }
                case -983052003: 
                    if (method.equals("updateRegion")) {
                        return updateRegion(in, reply);
                    }
                case -980388823: 
                    if (method.equals("findDocumentGroupList")) {
                        return findDocumentGroupList(in, reply);
                    }
                case -934610812: 
                    if (method.equals("remove")) {
                        return remove(in, reply);
                    }
                case -924875944: 
                    if (method.equals("findRatingTypeByKey")) {
                        return findRatingTypeByKey(in, reply);
                    }
                case -896231272: 
                    if (method.equals("removeRegion")) {
                        return removeRegion(in, reply);
                    }
                case -851395782: 
                    if (method.equals("updateBaseRate")) {
                        return updateBaseRate(in, reply);
                    }
                case -847123041: 
                    if (method.equals("addIndustry")) {
                        return addIndustry(in, reply);
                    }
                case -843664310: 
                    if (method.equals("findCommissionTypeByKey")) {
                        return findCommissionTypeByKey(in, reply);
                    }
                case -837572096: 
                    if (method.equals("findContractorTypeByKey")) {
                        return findContractorTypeByKey(in, reply);
                    }
                case -826420460: 
                    if (method.equals("findAuthorizedBodies")) {
                        return findAuthorizedBodies(in, reply);
                    }
                case -797068780: 
                    if (method.equals("updateTargetType")) {
                        return updateTargetType(in, reply);
                    }
                case -713385934: 
                    if (method.equals("findAuthorizedBodyByKey")) {
                        return findAuthorizedBodyByKey(in, reply);
                    }
                case -710517265: 
                    if (method.equals("findTargetTypes")) {
                        return findTargetTypes(in, reply);
                    }
                case -704093291: 
                    if (method.equals("removeStopFactor")) {
                        return removeStopFactor(in, reply);
                    }
                case -438995599: 
                    if (method.equals("removeLimitType")) {
                        return removeLimitType(in, reply);
                    }
                case -402708026: 
                    if (method.equals("addCommissionType")) {
                        return addCommissionType(in, reply);
                    }
                case -336079779: 
                    if (method.equals("findDocumentGroupByKey")) {
                        return findDocumentGroupByKey(in, reply);
                    }
                case -296961012: 
                    if (method.equals("findLimitTypeByKey")) {
                        return findLimitTypeByKey(in, reply);
                    }
                case -208184197: 
                    if (method.equals("findRegionByKey")) {
                        return findRegionByKey(in, reply);
                    }
                case -205456816: 
                    if (method.equals("addContractorType")) {
                        return addContractorType(in, reply);
                    }
                case -103911769: 
                    if (method.equals("removePatternPaidPercentType")) {
                        return removePatternPaidPercentType(in, reply);
                    }
                case -76119058: 
                    if (method.equals("updateCommissionType")) {
                        return updateCommissionType(in, reply);
                    }
                case -41955595: 
                    if (method.equals("addRegion")) {
                        return addRegion(in, reply);
                    }
                case -9306836: 
                    if (method.equals("updatePatternPaidPercentType")) {
                        return updatePatternPaidPercentType(in, reply);
                    }
                case -1172962: 
                    if (method.equals("findStopFactorByKey")) {
                        return findStopFactorByKey(in, reply);
                    }
                case 24147537: 
                    if (method.equals("updatePunitiveMeasure")) {
                        return updatePunitiveMeasure(in, reply);
                    }
                case 121132152: 
                    if (method.equals("updateContractorType")) {
                        return updateContractorType(in, reply);
                    }
                case 403468169: 
                    if (method.equals("removeOpportunityType")) {
                        return removeOpportunityType(in, reply);
                    }
                case 423840516: 
                    if (method.equals("addPatternPaidPercentType")) {
                        return addPatternPaidPercentType(in, reply);
                    }
                case 505437655: 
                    if (method.equals("findPatternPaidPercentTypes")) {
                        return findPatternPaidPercentTypes(in, reply);
                    }
                case 506659820: 
                    if (method.equals("addTargetType")) {
                        return addTargetType(in, reply);
                    }
                case 752151425: 
                    if (method.equals("removeAuthorizedBody")) {
                        return removeAuthorizedBody(in, reply);
                    }
                case 807275552: 
                    if (method.equals("updateRatingType")) {
                        return updateRatingType(in, reply);
                    }
                case 874762645: 
                    if (method.equals("findIndustries")) {
                        return findIndustries(in, reply);
                    }
                case 906314188: 
                    if (method.equals("findPatternPaidPercentTypeByKey")) {
                        return findPatternPaidPercentTypeByKey(in, reply);
                    }
                case 973869516: 
                    if (method.equals("addOpportunityType")) {
                        return addOpportunityType(in, reply);
                    }
                case 978948085: 
                    if (method.equals("removeBaseRate")) {
                        return removeBaseRate(in, reply);
                    }
                case 997328327: 
                    if (method.equals("updateIndustry")) {
                        return updateIndustry(in, reply);
                    }
                case 1264192840: 
                    if (method.equals("findListStopFactor")) {
                        return findListStopFactor(in, reply);
                    }
                case 1264756395: 
                    if (method.equals("isIdentical")) {
                        return isIdentical(in, reply);
                    }
                case 1272041882: 
                    if (method.equals("updateStopFactor")) {
                        return updateStopFactor(in, reply);
                    }
                case 1425719125: 
                    if (method.equals("findCommissionTypes")) {
                        return findCommissionTypes(in, reply);
                    }
                case 1472133143: 
                    if (method.equals("findLimitTypes")) {
                        return findLimitTypes(in, reply);
                    }
                case 1500197635: 
                    if (method.equals("addDocumentGroup")) {
                        return addDocumentGroup(in, reply);
                    }
                case 1510732763: 
                    if (method.equals("updateDocumentGroup")) {
                        return updateDocumentGroup(in, reply);
                    }
                case 1521763343: 
                    if (method.equals("removeTargetType")) {
                        return removeTargetType(in, reply);
                    }
                case 1539948273: 
                    if (method.equals("addDocumentsType")) {
                        return addDocumentsType(in, reply);
                    }
                case 1550483401: 
                    if (method.equals("updateDocumentsType")) {
                        return updateDocumentsType(in, reply);
                    }
                case 1584520192: 
                    if (method.equals("removeDocumentGroup")) {
                        return removeDocumentGroup(in, reply);
                    }
                case 1599120146: 
                    if (method.equals("addBaseRate")) {
                        return addBaseRate(in, reply);
                    }
                case 1606469108: 
                    if (method.equals("addLimitType")) {
                        return addLimitType(in, reply);
                    }
                case 1624270830: 
                    if (method.equals("removeDocumentsType")) {
                        return removeDocumentsType(in, reply);
                    }
                case 1779516771: 
                    if (method.equals("findRatingTypes")) {
                        return findRatingTypes(in, reply);
                    }
                case 1828156735: 
                    if (method.equals("findOpportunityTypes")) {
                        return findOpportunityTypes(in, reply);
                    }
                case 1922115590: 
                    if (method.equals("findRegions")) {
                        return findRegions(in, reply);
                    }
                case 1944413392: 
                    if (method.equals("_get_handle")) {
                        return _get_handle(in, reply);
                    }
                case 2082049327: 
                    if (method.equals("findDocumentsTypeByKey")) {
                        return findDocumentsTypeByKey(in, reply);
                    }
                case 2111004152: 
                    if (method.equals("addRatingType")) {
                        return addRatingType(in, reply);
                    }
                case 2132160818: 
                    if (method.equals("findPunitiveMeasures")) {
                        return findPunitiveMeasures(in, reply);
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }
    
    private OutputStream _get_EJBHome(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBHome result = target.getEJBHome();
        OutputStream out = reply.createReply();
        Util.writeRemoteObject(out,result);
        return out;
    }
    
    private OutputStream _get_primaryKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Object result = target.getPrimaryKey();
        OutputStream out = reply.createReply();
        Util.writeAny(out,result);
        return out;
    }
    
    private OutputStream remove(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        try {
            target.remove();
        } catch (RemoveException ex) {
            String id = "IDL:javax/ejb/RemoveEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,RemoveException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_handle(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Handle result = target.getHandle();
        OutputStream out = reply.createReply();
        Util.writeAbstractObject(out,result);
        return out;
    }
    
    private OutputStream isIdentical(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBObject arg0 = (EJBObject) in.read_Object(EJBObject.class);
        boolean result = target.isIdentical(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream findRatingTypes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findRatingTypes(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findCommissionTypes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findCommissionTypes(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findRatingTypeByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        RatingType result;
        try {
            result = target.findRatingTypeByKey(arg0);
        } catch (NoSuchRatingTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchRatingTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchRatingTypeException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,RatingType.class);
        return out;
    }
    
    private OutputStream addRatingType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        RatingType arg0 = (RatingType) in.read_value(RatingType.class);
        try {
            target.addRatingType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateRatingType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        RatingType arg0 = (RatingType) in.read_value(RatingType.class);
        try {
            target.updateRatingType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeRatingType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeRatingType(arg0);
        } catch (NoSuchRatingTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchRatingTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchRatingTypeException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findCommissionTypeByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        CommissionType result;
        try {
            result = target.findCommissionTypeByKey(arg0);
        } catch (NoSuchCommissionTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchCommissionTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchCommissionTypeException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,CommissionType.class);
        return out;
    }
    
    private OutputStream addCommissionType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        CommissionType arg0 = (CommissionType) in.read_value(CommissionType.class);
        try {
            target.addCommissionType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateCommissionType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        CommissionType arg0 = (CommissionType) in.read_value(CommissionType.class);
        try {
            target.updateCommissionType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeCommissionType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeCommissionType(arg0);
        } catch (NoSuchCommissionTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchCommissionTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchCommissionTypeException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findContractorTypes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findContractorTypes(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findContractorTypeByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        ContractorType result;
        try {
            result = target.findContractorTypeByKey(arg0);
        } catch (NoSuchContractorTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchContractorTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchContractorTypeException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ContractorType.class);
        return out;
    }
    
    private OutputStream addContractorType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        ContractorType arg0 = (ContractorType) in.read_value(ContractorType.class);
        try {
            target.addContractorType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateContractorType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        ContractorType arg0 = (ContractorType) in.read_value(ContractorType.class);
        try {
            target.updateContractorType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeContractorType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeContractorType(arg0);
        } catch (NoSuchContractorTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchContractorTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchContractorTypeException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findDocumentsTypes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findDocumentsTypes(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findDocumentsTypeByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        DocumentsType result;
        try {
            result = target.findDocumentsTypeByKey(arg0);
        } catch (NoSuchDocumentsTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchDocumentsTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchDocumentsTypeException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,DocumentsType.class);
        return out;
    }
    
    private OutputStream addDocumentsType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DocumentsType arg0 = (DocumentsType) in.read_value(DocumentsType.class);
        try {
            target.addDocumentsType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateDocumentsType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DocumentsType arg0 = (DocumentsType) in.read_value(DocumentsType.class);
        try {
            target.updateDocumentsType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeDocumentsType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeDocumentsType(arg0);
        } catch (NoSuchDocumentsTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchDocumentsTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchDocumentsTypeException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findLimitTypes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findLimitTypes(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findLimitTypeByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        LimitType result;
        try {
            result = target.findLimitTypeByKey(arg0);
        } catch (NoSuchLimitTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchLimitTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchLimitTypeException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,LimitType.class);
        return out;
    }
    
    private OutputStream addLimitType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        LimitType arg0 = (LimitType) in.read_value(LimitType.class);
        try {
            target.addLimitType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateLimitType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        LimitType arg0 = (LimitType) in.read_value(LimitType.class);
        try {
            target.updateLimitType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeLimitType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeLimitType(arg0);
        } catch (NoSuchLimitTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchLimitTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchLimitTypeException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findTargetTypes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findTargetTypes(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findTargetTypeByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        TargetType result;
        try {
            result = target.findTargetTypeByKey(arg0);
        } catch (NoSuchTargetTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchTargetTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchTargetTypeException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,TargetType.class);
        return out;
    }
    
    private OutputStream addTargetType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        TargetType arg0 = (TargetType) in.read_value(TargetType.class);
        try {
            target.addTargetType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateTargetType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        TargetType arg0 = (TargetType) in.read_value(TargetType.class);
        try {
            target.updateTargetType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeTargetType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeTargetType(arg0);
        } catch (NoSuchTargetTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchTargetTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchTargetTypeException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOpportunityTypes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOpportunityTypes(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOpportunityTypeByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        OpportunityType result;
        try {
            result = target.findOpportunityTypeByKey(arg0);
        } catch (NoSuchOpportunityTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOpportunityTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOpportunityTypeException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,OpportunityType.class);
        return out;
    }
    
    private OutputStream addOpportunityType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        OpportunityType arg0 = (OpportunityType) in.read_value(OpportunityType.class);
        try {
            target.addOpportunityType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateOpportunityType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        OpportunityType arg0 = (OpportunityType) in.read_value(OpportunityType.class);
        try {
            target.updateOpportunityType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeOpportunityType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeOpportunityType(arg0);
        } catch (NoSuchOpportunityTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOpportunityTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOpportunityTypeException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findIndustries(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findIndustries(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findIndustryByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Industry result;
        try {
            result = target.findIndustryByKey(arg0);
        } catch (NoSuchIndustryException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchIndustryEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchIndustryException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Industry.class);
        return out;
    }
    
    private OutputStream addIndustry(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Industry arg0 = (Industry) in.read_value(Industry.class);
        try {
            target.addIndustry(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateIndustry(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Industry arg0 = (Industry) in.read_value(Industry.class);
        try {
            target.updateIndustry(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeIndustry(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeIndustry(arg0);
        } catch (NoSuchIndustryException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchIndustryEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchIndustryException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findRegions(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findRegions(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findRegionByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Region result;
        try {
            result = target.findRegionByKey(arg0);
        } catch (NoSuchRegionException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchRegionEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchRegionException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Region.class);
        return out;
    }
    
    private OutputStream addRegion(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Region arg0 = (Region) in.read_value(Region.class);
        try {
            target.addRegion(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateRegion(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Region arg0 = (Region) in.read_value(Region.class);
        try {
            target.updateRegion(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeRegion(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeRegion(arg0);
        } catch (NoSuchRegionException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchRegionEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchRegionException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findPatternPaidPercentTypes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findPatternPaidPercentTypes(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findPatternPaidPercentTypeByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        PatternPaidPercentType result;
        try {
            result = target.findPatternPaidPercentTypeByKey(arg0);
        } catch (NoSuchPatternPaidPercentTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchPatternPaidPercentTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchPatternPaidPercentTypeException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PatternPaidPercentType.class);
        return out;
    }
    
    private OutputStream addPatternPaidPercentType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PatternPaidPercentType arg0 = (PatternPaidPercentType) in.read_value(PatternPaidPercentType.class);
        try {
            target.addPatternPaidPercentType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updatePatternPaidPercentType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PatternPaidPercentType arg0 = (PatternPaidPercentType) in.read_value(PatternPaidPercentType.class);
        try {
            target.updatePatternPaidPercentType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removePatternPaidPercentType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removePatternPaidPercentType(arg0);
        } catch (NoSuchPatternPaidPercentTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchPatternPaidPercentTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchPatternPaidPercentTypeException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findBaseRates(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findBaseRates(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findBaseRateByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        BaseRate result;
        try {
            result = target.findBaseRateByKey(arg0);
        } catch (NoSuchBaseRateException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchBaseRateEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchBaseRateException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,BaseRate.class);
        return out;
    }
    
    private OutputStream addBaseRate(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        BaseRate arg0 = (BaseRate) in.read_value(BaseRate.class);
        try {
            target.addBaseRate(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateBaseRate(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        BaseRate arg0 = (BaseRate) in.read_value(BaseRate.class);
        try {
            target.updateBaseRate(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeBaseRate(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeBaseRate(arg0);
        } catch (NoSuchBaseRateException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchBaseRateEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchBaseRateException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findPunitiveMeasures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findPunitiveMeasures(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findPunitiveMeasureByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        PunitiveMeasure result;
        try {
            result = target.findPunitiveMeasureByKey(arg0);
        } catch (NoSuchPunitiveMeasureException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchPunitiveMeasureEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchPunitiveMeasureException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PunitiveMeasure.class);
        return out;
    }
    
    private OutputStream addPunitiveMeasure(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PunitiveMeasure arg0 = (PunitiveMeasure) in.read_value(PunitiveMeasure.class);
        try {
            target.addPunitiveMeasure(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updatePunitiveMeasure(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PunitiveMeasure arg0 = (PunitiveMeasure) in.read_value(PunitiveMeasure.class);
        try {
            target.updatePunitiveMeasure(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removePunitiveMeasure(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removePunitiveMeasure(arg0);
        } catch (NoSuchPunitiveMeasureException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchPunitiveMeasureEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchPunitiveMeasureException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findAuthorizedBodies(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findAuthorizedBodies(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findAuthorizedBodyByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        AuthorizedBody result;
        try {
            result = target.findAuthorizedBodyByKey(arg0);
        } catch (NoSuchAuthorizedBodyException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchAuthorizedBodyEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchAuthorizedBodyException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,AuthorizedBody.class);
        return out;
    }
    
    private OutputStream addAuthorizedBody(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        AuthorizedBody arg0 = (AuthorizedBody) in.read_value(AuthorizedBody.class);
        try {
            target.addAuthorizedBody(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateAuthorizedBody(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        AuthorizedBody arg0 = (AuthorizedBody) in.read_value(AuthorizedBody.class);
        try {
            target.updateAuthorizedBody(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeAuthorizedBody(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeAuthorizedBody(arg0);
        } catch (NoSuchAuthorizedBodyException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchAuthorizedBodyEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchAuthorizedBodyException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findDocumentGroupList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findDocumentGroupList(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findDocumentGroupByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        DocumentGroup result;
        try {
            result = target.findDocumentGroupByKey(arg0);
        } catch (NoSuchDocumentGroupException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchDocumentGroupEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchDocumentGroupException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,DocumentGroup.class);
        return out;
    }
    
    private OutputStream addDocumentGroup(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DocumentGroup arg0 = (DocumentGroup) in.read_value(DocumentGroup.class);
        try {
            target.addDocumentGroup(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateDocumentGroup(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DocumentGroup arg0 = (DocumentGroup) in.read_value(DocumentGroup.class);
        try {
            target.updateDocumentGroup(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeDocumentGroup(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeDocumentGroup(arg0);
        } catch (NoSuchDocumentGroupException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchDocumentGroupEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchDocumentGroupException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findListStopFactor(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findListStopFactor(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findStopFactorByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        StopFactor result;
        try {
            result = target.findStopFactorByKey(arg0);
        } catch (NoSuchStopFactorException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchStopFactorEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchStopFactorException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,StopFactor.class);
        return out;
    }
    
    private OutputStream addStopFactor(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        StopFactor arg0 = (StopFactor) in.read_value(StopFactor.class);
        try {
            target.addStopFactor(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateStopFactor(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        StopFactor arg0 = (StopFactor) in.read_value(StopFactor.class);
        try {
            target.updateStopFactor(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeStopFactor(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        try {
            target.removeStopFactor(arg0);
        } catch (NoSuchStopFactorException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchStopFactorEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchStopFactorException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
}
