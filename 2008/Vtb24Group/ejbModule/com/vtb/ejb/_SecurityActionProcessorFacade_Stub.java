// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.vtb.ejb;

import com.vtb.domain.Address;
import com.vtb.domain.Department;
import com.vtb.domain.Govern;
import com.vtb.domain.MQSchedulerSheet;
import com.vtb.domain.Manager;
import com.vtb.domain.Okved;
import com.vtb.domain.Operator;
import com.vtb.domain.Organization;
import com.vtb.domain.OrganizationGroup;
import com.vtb.domain.OwnershipFormType;
import com.vtb.domain.SPOSettings;
import com.vtb.domain.Shareholder;
import com.vtb.exception.MappingException;
import com.vtb.exception.ModelException;
import com.vtb.exception.NoSuchAddressException;
import com.vtb.exception.NoSuchDepartmentException;
import com.vtb.exception.NoSuchGovernException;
import com.vtb.exception.NoSuchManagerException;
import com.vtb.exception.NoSuchMqSchedulerSheetException;
import com.vtb.exception.NoSuchOkvedException;
import com.vtb.exception.NoSuchOperatorException;
import com.vtb.exception.NoSuchOrganizationException;
import com.vtb.exception.NoSuchOrganizationGroupException;
import com.vtb.exception.NoSuchOwnershipFormTypeException;
import com.vtb.exception.NoSuchShareholderException;
import com.vtb.exception.NoSuchSpoSettingException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import java.util.ArrayList;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;

public class _SecurityActionProcessorFacade_Stub extends Stub implements SecurityActionProcessorFacade {
    
    private static final String[] _type_ids = {
        "RMI:com.vtb.ejb.SecurityActionProcessorFacade:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public EJBHome getEJBHome() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_EJBHome", true);
                        in = _invoke(out);
                        return (EJBHome) in.read_Object(EJBHome.class);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_EJBHome",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    EJBHome result = ((javax.ejb.EJBObject)so.servant).getEJBHome();
                    return (EJBHome)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Object getPrimaryKey() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_primaryKey", true);
                        in = _invoke(out);
                        return Util.readAny(in);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_primaryKey",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object result = ((javax.ejb.EJBObject)so.servant).getPrimaryKey();
                    return (Object)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void remove() throws RemoteException, RemoveException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("remove", true);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                            throw (RemoveException) in.read_value(RemoveException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("remove",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((javax.ejb.EJBObject)so.servant).remove();
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof RemoveException) {
                        throw (RemoveException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Handle getHandle() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_handle", true);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Handle) in.read_abstract_interface(Handle.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_handle",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    Handle result = ((javax.ejb.EJBObject)so.servant).getHandle();
                    return (Handle)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public boolean isIdentical(EJBObject arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("isIdentical", true);
                        Util.writeRemoteObject(out,arg0);
                        in = _invoke(out);
                        return in.read_boolean();
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("isIdentical",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                    return ((javax.ejb.EJBObject)so.servant).isIdentical(arg0Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findDepartments(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findDepartments", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findDepartments",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findDepartments(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Department findDepartmentByKey(Integer arg0) throws NoSuchDepartmentException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findDepartmentByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Department) in.read_value(Department.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchDepartmentEx:1.0")) {
                            throw (NoSuchDepartmentException) in.read_value(NoSuchDepartmentException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findDepartmentByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    Department result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findDepartmentByKey(arg0Copy);
                    return (Department)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchDepartmentException) {
                        throw (NoSuchDepartmentException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addDepartment(Department arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addDepartment", true);
                        out.write_value(arg0,Department.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addDepartment",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Department arg0Copy = (Department) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addDepartment(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateDepartment(Department arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateDepartment", true);
                        out.write_value(arg0,Department.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateDepartment",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Department arg0Copy = (Department) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateDepartment(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeDepartment(Integer arg0) throws NoSuchDepartmentException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeDepartment", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchDepartmentEx:1.0")) {
                            throw (NoSuchDepartmentException) in.read_value(NoSuchDepartmentException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeDepartment",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeDepartment(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchDepartmentException) {
                        throw (NoSuchDepartmentException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public SPOSettings findSpoSettingByKey(Integer arg0) throws NoSuchSpoSettingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findSpoSettingByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (SPOSettings) in.read_value(SPOSettings.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchSpoSettingEx:1.0")) {
                            throw (NoSuchSpoSettingException) in.read_value(NoSuchSpoSettingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findSpoSettingByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    SPOSettings result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findSpoSettingByKey(arg0Copy);
                    return (SPOSettings)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchSpoSettingException) {
                        throw (NoSuchSpoSettingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addSpoSetting(SPOSettings arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addSpoSetting", true);
                        out.write_value(arg0,SPOSettings.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addSpoSetting",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    SPOSettings arg0Copy = (SPOSettings) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addSpoSetting(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateSpoSetting(SPOSettings arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateSpoSetting", true);
                        out.write_value(arg0,SPOSettings.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateSpoSetting",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    SPOSettings arg0Copy = (SPOSettings) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateSpoSetting(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeSpoSetting(Integer arg0) throws NoSuchSpoSettingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeSpoSetting", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchSpoSettingEx:1.0")) {
                            throw (NoSuchSpoSettingException) in.read_value(NoSuchSpoSettingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeSpoSetting",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeSpoSetting(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchSpoSettingException) {
                        throw (NoSuchSpoSettingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOperators(Integer arg0, String arg1, String arg2) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOperators", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOperators",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    String arg2Copy = (String) copies[2];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOperators(arg0Copy, arg1Copy, arg2Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Operator findOperatorByKey(Integer arg0) throws NoSuchOperatorException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOperatorByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Operator) in.read_value(Operator.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOperatorEx:1.0")) {
                            throw (NoSuchOperatorException) in.read_value(NoSuchOperatorException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOperatorByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    Operator result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOperatorByKey(arg0Copy);
                    return (Operator)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOperatorException) {
                        throw (NoSuchOperatorException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addOperator(Operator arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addOperator", true);
                        out.write_value(arg0,Operator.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addOperator",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Operator arg0Copy = (Operator) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addOperator(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateOperator(Operator arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateOperator", true);
                        out.write_value(arg0,Operator.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateOperator",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Operator arg0Copy = (Operator) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateOperator(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeOperator(Integer arg0) throws NoSuchOperatorException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeOperator", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOperatorEx:1.0")) {
                            throw (NoSuchOperatorException) in.read_value(NoSuchOperatorException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeOperator",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeOperator(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOperatorException) {
                        throw (NoSuchOperatorException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOperatorToRoleAccessList(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOperatorToRoleAccessList(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOperatorToRoleList(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOperatorToRoleList", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOperatorToRoleList",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOperatorToRoleList(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addLinkOperatorToRole(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addLinkOperatorToRole", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addLinkOperatorToRole",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addLinkOperatorToRole(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void deleteLinkOperatorToRole(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteLinkOperatorToRole", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteLinkOperatorToRole",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).deleteLinkOperatorToRole(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void setStatusLinkOperatorToRole(String arg0, String arg1, String arg2) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("setStatusLinkOperatorToRole", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("setStatusLinkOperatorToRole",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).setStatusLinkOperatorToRole(arg0, arg1, arg2);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public MQSchedulerSheet findMqSchedulerSheetByKey(Integer arg0) throws NoSuchMqSchedulerSheetException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findMqSchedulerSheetByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (MQSchedulerSheet) in.read_value(MQSchedulerSheet.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchMqSchedulerSheetEx:1.0")) {
                            throw (NoSuchMqSchedulerSheetException) in.read_value(NoSuchMqSchedulerSheetException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findMqSchedulerSheetByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    MQSchedulerSheet result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findMqSchedulerSheetByKey(arg0Copy);
                    return (MQSchedulerSheet)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchMqSchedulerSheetException) {
                        throw (NoSuchMqSchedulerSheetException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addMqSchedulerSheet(MQSchedulerSheet arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addMqSchedulerSheet", true);
                        out.write_value(arg0,MQSchedulerSheet.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addMqSchedulerSheet",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    MQSchedulerSheet arg0Copy = (MQSchedulerSheet) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addMqSchedulerSheet(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateMqSchedulerSheet(MQSchedulerSheet arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateMqSchedulerSheet", true);
                        out.write_value(arg0,MQSchedulerSheet.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateMqSchedulerSheet",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    MQSchedulerSheet arg0Copy = (MQSchedulerSheet) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateMqSchedulerSheet(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeMqSchedulerSheet(Integer arg0) throws NoSuchMqSchedulerSheetException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeMqSchedulerSheet", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchMqSchedulerSheetEx:1.0")) {
                            throw (NoSuchMqSchedulerSheetException) in.read_value(NoSuchMqSchedulerSheetException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeMqSchedulerSheet",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeMqSchedulerSheet(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchMqSchedulerSheetException) {
                        throw (NoSuchMqSchedulerSheetException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findMqSchedulerSheetList(Integer arg0, String arg1, String arg2) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findMqSchedulerSheetList", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findMqSchedulerSheetList",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    String arg2Copy = (String) copies[2];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findMqSchedulerSheetList(arg0Copy, arg1Copy, arg2Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Operator findOperatorByLogin(String arg0) throws NoSuchOperatorException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOperatorByLogin", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Operator) in.read_value(Operator.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOperatorEx:1.0")) {
                            throw (NoSuchOperatorException) in.read_value(NoSuchOperatorException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOperatorByLogin",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Operator result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOperatorByLogin(arg0);
                    return (Operator)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOperatorException) {
                        throw (NoSuchOperatorException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOrganizationList(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationList", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationList",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationList(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Organization findOrganizationByKey(Integer arg0) throws NoSuchOrganizationException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Organization) in.read_value(Organization.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOrganizationEx:1.0")) {
                            throw (NoSuchOrganizationException) in.read_value(NoSuchOrganizationException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    Organization result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationByKey(arg0Copy);
                    return (Organization)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOrganizationException) {
                        throw (NoSuchOrganizationException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addOrganization(Organization arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addOrganization", true);
                        out.write_value(arg0,Organization.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Organization arg0Copy = (Organization) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addOrganization(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateOrganization(Organization arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateOrganization", true);
                        out.write_value(arg0,Organization.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Organization arg0Copy = (Organization) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateOrganization(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeOrganization(Integer arg0) throws NoSuchOrganizationException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeOrganization", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOrganizationEx:1.0")) {
                            throw (NoSuchOrganizationException) in.read_value(NoSuchOrganizationException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeOrganization(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOrganizationException) {
                        throw (NoSuchOrganizationException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOwnershipFormTypeList(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOwnershipFormTypeList", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOwnershipFormTypeList",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOwnershipFormTypeList(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public OwnershipFormType findOwnershipFormTypeByKey(Integer arg0) throws NoSuchOwnershipFormTypeException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOwnershipFormTypeByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (OwnershipFormType) in.read_value(OwnershipFormType.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOwnershipFormTypeEx:1.0")) {
                            throw (NoSuchOwnershipFormTypeException) in.read_value(NoSuchOwnershipFormTypeException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOwnershipFormTypeByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    OwnershipFormType result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOwnershipFormTypeByKey(arg0Copy);
                    return (OwnershipFormType)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOwnershipFormTypeException) {
                        throw (NoSuchOwnershipFormTypeException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addOwnershipFormType(OwnershipFormType arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addOwnershipFormType", true);
                        out.write_value(arg0,OwnershipFormType.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addOwnershipFormType",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    OwnershipFormType arg0Copy = (OwnershipFormType) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addOwnershipFormType(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateOwnershipFormType(OwnershipFormType arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateOwnershipFormType", true);
                        out.write_value(arg0,OwnershipFormType.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateOwnershipFormType",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    OwnershipFormType arg0Copy = (OwnershipFormType) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateOwnershipFormType(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeOwnershipFormType(Integer arg0) throws NoSuchOwnershipFormTypeException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeOwnershipFormType", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOwnershipFormTypeEx:1.0")) {
                            throw (NoSuchOwnershipFormTypeException) in.read_value(NoSuchOwnershipFormTypeException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeOwnershipFormType",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeOwnershipFormType(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOwnershipFormTypeException) {
                        throw (NoSuchOwnershipFormTypeException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOrganizationGroupList(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationGroupList", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationGroupList",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationGroupList(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public OrganizationGroup findOrganizationGroupByKey(Integer arg0) throws NoSuchOrganizationGroupException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationGroupByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (OrganizationGroup) in.read_value(OrganizationGroup.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOrganizationGroupEx:1.0")) {
                            throw (NoSuchOrganizationGroupException) in.read_value(NoSuchOrganizationGroupException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationGroupByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    OrganizationGroup result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationGroupByKey(arg0Copy);
                    return (OrganizationGroup)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOrganizationGroupException) {
                        throw (NoSuchOrganizationGroupException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addOrganizationGroup(OrganizationGroup arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addOrganizationGroup", true);
                        out.write_value(arg0,OrganizationGroup.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addOrganizationGroup",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    OrganizationGroup arg0Copy = (OrganizationGroup) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addOrganizationGroup(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateOrganizationGroup(OrganizationGroup arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateOrganizationGroup", true);
                        out.write_value(arg0,OrganizationGroup.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateOrganizationGroup",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    OrganizationGroup arg0Copy = (OrganizationGroup) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateOrganizationGroup(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeOrganizationGroup(Integer arg0) throws NoSuchOrganizationGroupException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeOrganizationGroup", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOrganizationGroupEx:1.0")) {
                            throw (NoSuchOrganizationGroupException) in.read_value(NoSuchOrganizationGroupException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeOrganizationGroup",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeOrganizationGroup(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOrganizationGroupException) {
                        throw (NoSuchOrganizationGroupException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOrganizationListByGroup(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationListByGroup", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationListByGroup",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationListByGroup(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addLinkGroupToOrganization(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addLinkGroupToOrganization", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addLinkGroupToOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addLinkGroupToOrganization(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void deleteLinkGroupToOrganization(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteLinkGroupToOrganization", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteLinkGroupToOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).deleteLinkGroupToOrganization(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findAddressListByOrganization(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findAddressListByOrganization", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findAddressListByOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findAddressListByOrganization(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Address findAddressByKey(Integer arg0) throws NoSuchAddressException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findAddressByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Address) in.read_value(Address.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchAddressEx:1.0")) {
                            throw (NoSuchAddressException) in.read_value(NoSuchAddressException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findAddressByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    Address result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findAddressByKey(arg0Copy);
                    return (Address)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchAddressException) {
                        throw (NoSuchAddressException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addAddress(Address arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addAddress", true);
                        out.write_value(arg0,Address.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addAddress",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Address arg0Copy = (Address) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addAddress(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateAddress(Address arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateAddress", true);
                        out.write_value(arg0,Address.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateAddress",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Address arg0Copy = (Address) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateAddress(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeAddress(Integer arg0) throws NoSuchAddressException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeAddress", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchAddressEx:1.0")) {
                            throw (NoSuchAddressException) in.read_value(NoSuchAddressException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeAddress",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeAddress(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchAddressException) {
                        throw (NoSuchAddressException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findProcessTypeList(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findProcessTypeList", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findProcessTypeList",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findProcessTypeList(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOperatorToRoleAccessList(String arg0, String arg1, String arg2) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue__CORBA_WStringValue", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue__CORBA_WStringValue",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOperatorToRoleAccessList(arg0, arg1, arg2);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findGroupListByOrganization(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findGroupListByOrganization", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findGroupListByOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findGroupListByOrganization(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findGovernListByOrganization(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findGovernListByOrganization", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findGovernListByOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findGovernListByOrganization(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Govern findGovernByKey(Integer arg0) throws NoSuchGovernException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findGovernByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Govern) in.read_value(Govern.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchGovernEx:1.0")) {
                            throw (NoSuchGovernException) in.read_value(NoSuchGovernException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findGovernByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    Govern result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findGovernByKey(arg0Copy);
                    return (Govern)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchGovernException) {
                        throw (NoSuchGovernException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addGovern(Govern arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addGovern", true);
                        out.write_value(arg0,Govern.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addGovern",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Govern arg0Copy = (Govern) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addGovern(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateGovern(Govern arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateGovern", true);
                        out.write_value(arg0,Govern.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateGovern",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Govern arg0Copy = (Govern) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateGovern(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeGovern(Integer arg0) throws NoSuchGovernException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeGovern", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchGovernEx:1.0")) {
                            throw (NoSuchGovernException) in.read_value(NoSuchGovernException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeGovern",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeGovern(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchGovernException) {
                        throw (NoSuchGovernException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findShareholderListByOrganization(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findShareholderListByOrganization", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findShareholderListByOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findShareholderListByOrganization(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Shareholder findShareholderByKey(Integer arg0) throws NoSuchShareholderException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findShareholderByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Shareholder) in.read_value(Shareholder.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchShareholderEx:1.0")) {
                            throw (NoSuchShareholderException) in.read_value(NoSuchShareholderException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findShareholderByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    Shareholder result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findShareholderByKey(arg0Copy);
                    return (Shareholder)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchShareholderException) {
                        throw (NoSuchShareholderException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addShareholder(Shareholder arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addShareholder", true);
                        out.write_value(arg0,Shareholder.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addShareholder",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Shareholder arg0Copy = (Shareholder) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addShareholder(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateShareholder(Shareholder arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateShareholder", true);
                        out.write_value(arg0,Shareholder.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateShareholder",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Shareholder arg0Copy = (Shareholder) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateShareholder(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeShareholder(Integer arg0) throws NoSuchShareholderException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeShareholder", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchShareholderEx:1.0")) {
                            throw (NoSuchShareholderException) in.read_value(NoSuchShareholderException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeShareholder",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeShareholder(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchShareholderException) {
                        throw (NoSuchShareholderException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOrganizationListTO(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationListTO", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationListTO",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationListTO(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOrganizationGroupListTO(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationGroupListTO", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationGroupListTO",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationGroupListTO(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findManagerListByOrganization(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findManagerListByOrganization", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findManagerListByOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findManagerListByOrganization(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Manager findManagerByKey(Integer arg0) throws NoSuchManagerException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findManagerByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Manager) in.read_value(Manager.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchManagerEx:1.0")) {
                            throw (NoSuchManagerException) in.read_value(NoSuchManagerException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findManagerByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    Manager result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findManagerByKey(arg0Copy);
                    return (Manager)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchManagerException) {
                        throw (NoSuchManagerException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addManager(Manager arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addManager", true);
                        out.write_value(arg0,Manager.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addManager",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Manager arg0Copy = (Manager) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addManager(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateManager(Manager arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateManager", true);
                        out.write_value(arg0,Manager.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateManager",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Manager arg0Copy = (Manager) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateManager(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeManager(Integer arg0) throws NoSuchManagerException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeManager", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchManagerEx:1.0")) {
                            throw (NoSuchManagerException) in.read_value(NoSuchManagerException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeManager",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeManager(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchManagerException) {
                        throw (NoSuchManagerException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOkvedList(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOkvedList", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOkvedList",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOkvedList(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Okved findOkvedByKey(Integer arg0) throws NoSuchOkvedException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOkvedByKey", true);
                        out.write_value(arg0,Integer.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Okved) in.read_value(Okved.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOkvedEx:1.0")) {
                            throw (NoSuchOkvedException) in.read_value(NoSuchOkvedException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOkvedByKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    Okved result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOkvedByKey(arg0Copy);
                    return (Okved)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOkvedException) {
                        throw (NoSuchOkvedException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addOkved(Okved arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addOkved", true);
                        out.write_value(arg0,Okved.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addOkved",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Okved arg0Copy = (Okved) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addOkved(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateOkved(Okved arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateOkved", true);
                        out.write_value(arg0,Okved.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateOkved",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Okved arg0Copy = (Okved) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateOkved(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void removeOkved(Integer arg0) throws NoSuchOkvedException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("removeOkved", true);
                        out.write_value(arg0,Integer.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOkvedEx:1.0")) {
                            throw (NoSuchOkvedException) in.read_value(NoSuchOkvedException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("removeOkved",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).removeOkved(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOkvedException) {
                        throw (NoSuchOkvedException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOkvedHierarchyList(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOkvedHierarchyList", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOkvedHierarchyList",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOkvedHierarchyList(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void deleteLinkOkvedToOrganization(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteLinkOkvedToOrganization", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteLinkOkvedToOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).deleteLinkOkvedToOrganization(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addLinkOkvedToOrganization(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addLinkOkvedToOrganization", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addLinkOkvedToOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addLinkOkvedToOrganization(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOkvedListByOrganization(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOkvedListByOrganization", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOkvedListByOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOkvedListByOrganization(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Organization findOrganizationByCrmKey(String arg0) throws NoSuchOrganizationException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationByCrmKey", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Organization) in.read_value(Organization.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOrganizationEx:1.0")) {
                            throw (NoSuchOrganizationException) in.read_value(NoSuchOrganizationException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationByCrmKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Organization result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationByCrmKey(arg0);
                    return (Organization)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOrganizationException) {
                        throw (NoSuchOrganizationException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOkvedListTO(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOkvedListTO", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOkvedListTO",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOkvedListTO(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void updateOrganizationCRM(Organization arg0) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateOrganizationCRM", true);
                        out.write_value(arg0,Organization.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateOrganizationCRM",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Organization arg0Copy = (Organization) Util.copyObject(arg0,_orb());
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).updateOrganizationCRM(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOrganizationListTO_ByGroup(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationListTO_ByGroup", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationListTO_ByGroup",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationListTO_ByGroup(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addLinkGroupToOrganizationCRM(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addLinkGroupToOrganizationCRM", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addLinkGroupToOrganizationCRM",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addLinkGroupToOrganizationCRM(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void deleteLinkGroupToOrganizationCRM(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteLinkGroupToOrganizationCRM", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteLinkGroupToOrganizationCRM",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).deleteLinkGroupToOrganizationCRM(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addLinkGroupCrmToOrganization(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addLinkGroupCrmToOrganization", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addLinkGroupCrmToOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addLinkGroupCrmToOrganization(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addLinkGroupCrmToOrganizationCRM(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addLinkGroupCrmToOrganizationCRM", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addLinkGroupCrmToOrganizationCRM",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addLinkGroupCrmToOrganizationCRM(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void deleteLinkGroupCrmToOrganization(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteLinkGroupCrmToOrganization", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteLinkGroupCrmToOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).deleteLinkGroupCrmToOrganization(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void deleteLinkGroupCrmToOrganizationCRM(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteLinkGroupCrmToOrganizationCRM", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteLinkGroupCrmToOrganizationCRM",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).deleteLinkGroupCrmToOrganizationCRM(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOrganizationListTO_ByGroupCRM(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationListTO_ByGroupCRM", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationListTO_ByGroupCRM",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationListTO_ByGroupCRM(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public OrganizationGroup findOrganizationGroupByCrmKey(String arg0) throws NoSuchOrganizationGroupException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOrganizationGroupByCrmKey", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (OrganizationGroup) in.read_value(OrganizationGroup.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOrganizationGroupEx:1.0")) {
                            throw (NoSuchOrganizationGroupException) in.read_value(NoSuchOrganizationGroupException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOrganizationGroupByCrmKey",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    OrganizationGroup result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOrganizationGroupByCrmKey(arg0);
                    return (OrganizationGroup)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOrganizationGroupException) {
                        throw (NoSuchOrganizationGroupException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findGroupListTO_ByOrganization(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findGroupListTO_ByOrganization", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findGroupListTO_ByOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findGroupListTO_ByOrganization(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findGroupListTO_ByOrganizationCRM(String arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findGroupListTO_ByOrganizationCRM", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findGroupListTO_ByOrganizationCRM",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findGroupListTO_ByOrganizationCRM(arg0, arg1);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList findOkvedListTO_ByOrganization(Integer arg0, String arg1) throws ModelException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findOkvedListTO_ByOrganization", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/ModelEx:1.0")) {
                            throw (ModelException) in.read_value(ModelException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findOkvedListTO_ByOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList result = ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).findOkvedListTO_ByOrganization(arg0Copy, arg1Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ModelException) {
                        throw (ModelException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addLinkOkvedCrmToOrganization(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addLinkOkvedCrmToOrganization", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addLinkOkvedCrmToOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).addLinkOkvedCrmToOrganization(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void deleteLinkOkvedCrmToOrganization(String arg0, String arg1) throws MappingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteLinkOkvedCrmToOrganization", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteLinkOkvedCrmToOrganization",com.vtb.ejb.SecurityActionProcessorFacade.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((com.vtb.ejb.SecurityActionProcessorFacade)so.servant).deleteLinkOkvedCrmToOrganization(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
}
