// Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.vtb.ejb;

import com.vtb.domain.Address;
import com.vtb.domain.Department;
import com.vtb.domain.Govern;
import com.vtb.domain.MQSchedulerSheet;
import com.vtb.domain.Manager;
import com.vtb.domain.Okved;
import com.vtb.domain.Operator;
import com.vtb.domain.Organization;
import com.vtb.domain.OrganizationGroup;
import com.vtb.domain.OwnershipFormType;
import com.vtb.domain.SPOSettings;
import com.vtb.domain.Shareholder;
import com.vtb.exception.MappingException;
import com.vtb.exception.ModelException;
import com.vtb.exception.NoSuchAddressException;
import com.vtb.exception.NoSuchDepartmentException;
import com.vtb.exception.NoSuchGovernException;
import com.vtb.exception.NoSuchManagerException;
import com.vtb.exception.NoSuchMqSchedulerSheetException;
import com.vtb.exception.NoSuchOkvedException;
import com.vtb.exception.NoSuchOperatorException;
import com.vtb.exception.NoSuchOrganizationException;
import com.vtb.exception.NoSuchOrganizationGroupException;
import com.vtb.exception.NoSuchOwnershipFormTypeException;
import com.vtb.exception.NoSuchShareholderException;
import com.vtb.exception.NoSuchSpoSettingException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import java.util.ArrayList;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.Delegate;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;

public class _EJSRemoteStatelessSecurityActionProcessorFacade_97697a53_Tie extends org.omg.CORBA_2_3.portable.ObjectImpl implements Tie {
    
    private EJSRemoteStatelessSecurityActionProcessorFacade_97697a53 target = null;
    private ORB orb = null;
    
    private static final String[] _type_ids = {
        "RMI:com.vtb.ejb.SecurityActionProcessorFacade:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000", 
        "RMI:com.ibm.websphere.csi.CSIServant:0000000000000000", 
        "RMI:com.ibm.websphere.csi.TransactionalObject:0000000000000000"
    };
    
    public void setTarget(Remote target) {
        this.target = (EJSRemoteStatelessSecurityActionProcessorFacade_97697a53) target;
    }
    
    public Remote getTarget() {
        return target;
    }
    
    public org.omg.CORBA.Object thisObject() {
        return this;
    }
    
    public void deactivate() {
        if (orb != null) {
            orb.disconnect(this);
            _set_delegate(null);
        }
    }
    
    public ORB orb() {
        return _orb();
    }
    
    public void orb(ORB orb) {
        orb.connect(this);
    }
    
    public void _set_delegate(Delegate del) {
        super._set_delegate(del);
        if (del != null)
            orb = _orb();
        else
            orb = null;
    }
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public OutputStream _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in = 
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.hashCode()) {
                case -2141570113: 
                    if (method.equals("addSpoSetting")) {
                        return addSpoSetting(in, reply);
                    }
                case -2124817991: 
                    if (method.equals("findOkvedListTO")) {
                        return findOkvedListTO(in, reply);
                    }
                case -2095005368: 
                    if (method.equals("removeOperator")) {
                        return removeOperator(in, reply);
                    }
                case -2075554684: 
                    if (method.equals("findOrganizationByCrmKey")) {
                        return findOrganizationByCrmKey(in, reply);
                    }
                case -2043954794: 
                    if (method.equals("deleteLinkGroupToOrganizationCRM")) {
                        return deleteLinkGroupToOrganizationCRM(in, reply);
                    }
                case -2007647979: 
                    if (method.equals("findOperatorByLogin")) {
                        return findOperatorByLogin(in, reply);
                    }
                case -1984767070: 
                    if (method.equals("updateOrganizationCRM")) {
                        return updateOrganizationCRM(in, reply);
                    }
                case -1915636894: 
                    if (method.equals("deleteLinkOkvedToOrganization")) {
                        return deleteLinkOkvedToOrganization(in, reply);
                    }
                case -1768816180: 
                    if (method.equals("deleteLinkGroupCrmToOrganizationCRM")) {
                        return deleteLinkGroupCrmToOrganizationCRM(in, reply);
                    }
                case -1711715762: 
                    if (method.equals("findOrganizationListTO_ByGroup")) {
                        return findOrganizationListTO_ByGroup(in, reply);
                    }
                case -1702011285: 
                    if (method.equals("addOrganizationGroup")) {
                        return addOrganizationGroup(in, reply);
                    }
                case -1690461400: 
                    if (method.equals("deleteLinkGroupToOrganization")) {
                        return deleteLinkGroupToOrganization(in, reply);
                    }
                case -1665480500: 
                    if (method.equals("removeMqSchedulerSheet")) {
                        return removeMqSchedulerSheet(in, reply);
                    }
                case -1609601241: 
                    if (method.equals("removeShareholder")) {
                        return removeShareholder(in, reply);
                    }
                case -1551472692: 
                    if (method.equals("addManager")) {
                        return addManager(in, reply);
                    }
                case -1550521068: 
                    if (method.equals("_get_EJBHome")) {
                        return _get_EJBHome(in, reply);
                    }
                case -1496878397: 
                    if (method.equals("findAddressListByOrganization")) {
                        return findAddressListByOrganization(in, reply);
                    }
                case -1474833307: 
                    if (method.equals("addOperator")) {
                        return addOperator(in, reply);
                    }
                case -1288294340: 
                    if (method.equals("updateGovern")) {
                        return updateGovern(in, reply);
                    }
                case -1273770996: 
                    if (method.equals("addOwnershipFormType")) {
                        return addOwnershipFormType(in, reply);
                    }
                case -1250856936: 
                    if (method.equals("addOkved")) {
                        return addOkved(in, reply);
                    }
                case -1201473609: 
                    if (method.equals("removeGovern")) {
                        return removeGovern(in, reply);
                    }
                case -1162907927: 
                    if (method.equals("addMqSchedulerSheet")) {
                        return addMqSchedulerSheet(in, reply);
                    }
                case -1145820167: 
                    if (method.equals("findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue__CORBA_WStringValue")) {
                        return findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue__CORBA_WStringValue(in, reply);
                    }
                case -1126466590: 
                    if (method.equals("removeSpoSetting")) {
                        return removeSpoSetting(in, reply);
                    }
                case -1039871884: 
                    if (method.equals("addOrganization")) {
                        return addOrganization(in, reply);
                    }
                case -1015903884: 
                    if (method.equals("findGroupListTO_ByOrganizationCRM")) {
                        return findGroupListTO_ByOrganizationCRM(in, reply);
                    }
                case -1011244123: 
                    if (method.equals("_get_primaryKey")) {
                        return _get_primaryKey(in, reply);
                    }
                case -983483754: 
                    if (method.equals("addLinkGroupCrmToOrganizationCRM")) {
                        return addLinkGroupCrmToOrganizationCRM(in, reply);
                    }
                case -970480902: 
                    if (method.equals("deleteLinkOperatorToRole")) {
                        return deleteLinkOperatorToRole(in, reply);
                    }
                case -942499652: 
                    if (method.equals("findGovernByKey")) {
                        return findGovernByKey(in, reply);
                    }
                case -934610812: 
                    if (method.equals("remove")) {
                        return remove(in, reply);
                    }
                case -929359216: 
                    if (method.equals("findOkvedListTO_ByOrganization")) {
                        return findOkvedListTO_ByOrganization(in, reply);
                    }
                case -913569723: 
                    if (method.equals("findOrganizationListTO")) {
                        return findOrganizationListTO(in, reply);
                    }
                case -890688268: 
                    if (method.equals("findOwnershipFormTypeByKey")) {
                        return findOwnershipFormTypeByKey(in, reply);
                    }
                case -843629067: 
                    if (method.equals("findOrganizationGroupByKey")) {
                        return findOrganizationGroupByKey(in, reply);
                    }
                case -843522287: 
                    if (method.equals("updateMqSchedulerSheet")) {
                        return updateMqSchedulerSheet(in, reply);
                    }
                case -714865552: 
                    if (method.equals("addLinkOperatorToRole")) {
                        return addLinkOperatorToRole(in, reply);
                    }
                case -704041294: 
                    if (method.equals("deleteLinkGroupCrmToOrganization")) {
                        return deleteLinkGroupCrmToOrganization(in, reply);
                    }
                case -681539906: 
                    if (method.equals("findOkvedList")) {
                        return findOkvedList(in, reply);
                    }
                case -660690268: 
                    if (method.equals("updateManager")) {
                        return updateManager(in, reply);
                    }
                case -592500239: 
                    if (method.equals("findSpoSettingByKey")) {
                        return findSpoSettingByKey(in, reply);
                    }
                case -588478224: 
                    if (method.equals("updateOkved")) {
                        return updateOkved(in, reply);
                    }
                case -553499380: 
                    if (method.equals("addLinkGroupToOrganizationCRM")) {
                        return addLinkGroupToOrganizationCRM(in, reply);
                    }
                case -550837245: 
                    if (method.equals("setStatusLinkOperatorToRole")) {
                        return setStatusLinkOperatorToRole(in, reply);
                    }
                case -509282241: 
                    if (method.equals("findMqSchedulerSheetList")) {
                        return findMqSchedulerSheetList(in, reply);
                    }
                case -482962473: 
                    if (method.equals("removeOrganization")) {
                        return removeOrganization(in, reply);
                    }
                case -478953022: 
                    if (method.equals("updateShareholder")) {
                        return updateShareholder(in, reply);
                    }
                case -453909412: 
                    if (method.equals("findOrganizationByKey")) {
                        return findOrganizationByKey(in, reply);
                    }
                case -435506949: 
                    if (method.equals("updateDepartment")) {
                        return updateDepartment(in, reply);
                    }
                case -390991037: 
                    if (method.equals("updateOrganizationGroup")) {
                        return updateOrganizationGroup(in, reply);
                    }
                case -347197932: 
                    if (method.equals("addGovern")) {
                        return addGovern(in, reply);
                    }
                case -308582891: 
                    if (method.equals("removeOkved")) {
                        return removeOkved(in, reply);
                    }
                case -209335380: 
                    if (method.equals("addLinkOkvedToOrganization")) {
                        return addLinkOkvedToOrganization(in, reply);
                    }
                case -189799669: 
                    if (method.equals("findOperatorByKey")) {
                        return findOperatorByKey(in, reply);
                    }
                case -168266696: 
                    if (method.equals("deleteLinkOkvedCrmToOrganization")) {
                        return deleteLinkOkvedCrmToOrganization(in, reply);
                    }
                case -109977140: 
                    if (method.equals("findOrganizationGroupListTO")) {
                        return findOrganizationGroupListTO(in, reply);
                    }
                case -101891864: 
                    if (method.equals("removeOrganizationGroup")) {
                        return removeOrganizationGroup(in, reply);
                    }
                case -32456514: 
                    if (method.equals("findOrganizationListByGroup")) {
                        return findOrganizationListByGroup(in, reply);
                    }
                case -14358454: 
                    if (method.equals("findOrganizationList")) {
                        return findOrganizationList(in, reply);
                    }
                case 15840114: 
                    if (method.equals("addLinkGroupToOrganization")) {
                        return addLinkGroupToOrganization(in, reply);
                    }
                case 37249252: 
                    if (method.equals("updateOwnershipFormType")) {
                        return updateOwnershipFormType(in, reply);
                    }
                case 47800016: 
                    if (method.equals("removeAddress")) {
                        return removeAddress(in, reply);
                    }
                case 179937875: 
                    if (method.equals("findOkvedHierarchyList")) {
                        return findOkvedHierarchyList(in, reply);
                    }
                case 193818445: 
                    if (method.equals("findAddressByKey")) {
                        return findAddressByKey(in, reply);
                    }
                case 207393948: 
                    if (method.equals("updateOrganization")) {
                        return updateOrganization(in, reply);
                    }
                case 326348425: 
                    if (method.equals("removeOwnershipFormType")) {
                        return removeOwnershipFormType(in, reply);
                    }
                case 338302056: 
                    if (method.equals("findOkvedByKey")) {
                        return findOkvedByKey(in, reply);
                    }
                case 369618061: 
                    if (method.equals("updateOperator")) {
                        return updateOperator(in, reply);
                    }
                case 422506672: 
                    if (method.equals("findOrganizationListTO_ByGroupCRM")) {
                        return findOrganizationListTO_ByGroupCRM(in, reply);
                    }
                case 525741234: 
                    if (method.equals("findOwnershipFormTypeList")) {
                        return findOwnershipFormTypeList(in, reply);
                    }
                case 532188634: 
                    if (method.equals("findShareholderListByOrganization")) {
                        return findShareholderListByOrganization(in, reply);
                    }
                case 760542227: 
                    if (method.equals("addAddress")) {
                        return addAddress(in, reply);
                    }
                case 786414120: 
                    if (method.equals("addLinkGroupCrmToOrganization")) {
                        return addLinkGroupCrmToOrganization(in, reply);
                    }
                case 804353937: 
                    if (method.equals("findOrganizationGroupList")) {
                        return findOrganizationGroupList(in, reply);
                    }
                case 849668583: 
                    if (method.equals("updateSpoSetting")) {
                        return updateSpoSetting(in, reply);
                    }
                case 868221651: 
                    if (method.equals("addDepartment")) {
                        return addDepartment(in, reply);
                    }
                case 921612125: 
                    if (method.equals("findDepartmentByKey")) {
                        return findDepartmentByKey(in, reply);
                    }
                case 924276148: 
                    if (method.equals("findGovernListByOrganization")) {
                        return findGovernListByOrganization(in, reply);
                    }
                case 1087065654: 
                    if (method.equals("findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue")) {
                        return findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue(in, reply);
                    }
                case 1090728328: 
                    if (method.equals("findOkvedListByOrganization")) {
                        return findOkvedListByOrganization(in, reply);
                    }
                case 1157392180: 
                    if (method.equals("findManagerByKey")) {
                        return findManagerByKey(in, reply);
                    }
                case 1159404246: 
                    if (method.equals("findShareholderByKey")) {
                        return findShareholderByKey(in, reply);
                    }
                case 1236524844: 
                    if (method.equals("findOperatorToRoleList")) {
                        return findOperatorToRoleList(in, reply);
                    }
                case 1264756395: 
                    if (method.equals("isIdentical")) {
                        return isIdentical(in, reply);
                    }
                case 1281927914: 
                    if (method.equals("addShareholder")) {
                        return addShareholder(in, reply);
                    }
                case 1322188718: 
                    if (method.equals("addLinkOkvedCrmToOrganization")) {
                        return addLinkOkvedCrmToOrganization(in, reply);
                    }
                case 1377771595: 
                    if (method.equals("findOrganizationGroupByCrmKey")) {
                        return findOrganizationGroupByCrmKey(in, reply);
                    }
                case 1383322375: 
                    if (method.equals("findMqSchedulerSheetByKey")) {
                        return findMqSchedulerSheetByKey(in, reply);
                    }
                case 1459987342: 
                    if (method.equals("findProcessTypeList")) {
                        return findProcessTypeList(in, reply);
                    }
                case 1651324651: 
                    if (method.equals("updateAddress")) {
                        return updateAddress(in, reply);
                    }
                case 1661584974: 
                    if (method.equals("findGroupListByOrganization")) {
                        return findGroupListByOrganization(in, reply);
                    }
                case 1685456906: 
                    if (method.equals("findGroupListTO_ByOrganization")) {
                        return findGroupListTO_ByOrganization(in, reply);
                    }
                case 1883325174: 
                    if (method.equals("removeDepartment")) {
                        return removeDepartment(in, reply);
                    }
                case 1905489558: 
                    if (method.equals("findOperators")) {
                        return findOperators(in, reply);
                    }
                case 1907964904: 
                    if (method.equals("findDepartments")) {
                        return findDepartments(in, reply);
                    }
                case 1944413392: 
                    if (method.equals("_get_handle")) {
                        return _get_handle(in, reply);
                    }
                case 2030752393: 
                    if (method.equals("removeManager")) {
                        return removeManager(in, reply);
                    }
                case 2093140540: 
                    if (method.equals("findManagerListByOrganization")) {
                        return findManagerListByOrganization(in, reply);
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }
    
    private OutputStream _get_EJBHome(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBHome result = target.getEJBHome();
        OutputStream out = reply.createReply();
        Util.writeRemoteObject(out,result);
        return out;
    }
    
    private OutputStream _get_primaryKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Object result = target.getPrimaryKey();
        OutputStream out = reply.createReply();
        Util.writeAny(out,result);
        return out;
    }
    
    private OutputStream remove(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        try {
            target.remove();
        } catch (RemoveException ex) {
            String id = "IDL:javax/ejb/RemoveEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,RemoveException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_handle(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Handle result = target.getHandle();
        OutputStream out = reply.createReply();
        Util.writeAbstractObject(out,result);
        return out;
    }
    
    private OutputStream isIdentical(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBObject arg0 = (EJBObject) in.read_Object(EJBObject.class);
        boolean result = target.isIdentical(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream findDepartments(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findDepartments(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findDepartmentByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Department result;
        try {
            result = target.findDepartmentByKey(arg0);
        } catch (NoSuchDepartmentException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchDepartmentEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchDepartmentException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Department.class);
        return out;
    }
    
    private OutputStream addDepartment(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Department arg0 = (Department) in.read_value(Department.class);
        try {
            target.addDepartment(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateDepartment(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Department arg0 = (Department) in.read_value(Department.class);
        try {
            target.updateDepartment(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeDepartment(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeDepartment(arg0);
        } catch (NoSuchDepartmentException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchDepartmentEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchDepartmentException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findSpoSettingByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        SPOSettings result;
        try {
            result = target.findSpoSettingByKey(arg0);
        } catch (NoSuchSpoSettingException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchSpoSettingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchSpoSettingException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,SPOSettings.class);
        return out;
    }
    
    private OutputStream addSpoSetting(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        SPOSettings arg0 = (SPOSettings) in.read_value(SPOSettings.class);
        try {
            target.addSpoSetting(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateSpoSetting(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        SPOSettings arg0 = (SPOSettings) in.read_value(SPOSettings.class);
        try {
            target.updateSpoSetting(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeSpoSetting(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeSpoSetting(arg0);
        } catch (NoSuchSpoSettingException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchSpoSettingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchSpoSettingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOperators(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        String arg2 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOperators(arg0, arg1, arg2);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOperatorByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Operator result;
        try {
            result = target.findOperatorByKey(arg0);
        } catch (NoSuchOperatorException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOperatorEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOperatorException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Operator.class);
        return out;
    }
    
    private OutputStream addOperator(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Operator arg0 = (Operator) in.read_value(Operator.class);
        try {
            target.addOperator(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateOperator(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Operator arg0 = (Operator) in.read_value(Operator.class);
        try {
            target.updateOperator(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeOperator(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeOperator(arg0);
        } catch (NoSuchOperatorException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOperatorEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOperatorException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOperatorToRoleAccessList(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOperatorToRoleList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOperatorToRoleList(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream addLinkOperatorToRole(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.addLinkOperatorToRole(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream deleteLinkOperatorToRole(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.deleteLinkOperatorToRole(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream setStatusLinkOperatorToRole(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        String arg2 = (String) in.read_value(String.class);
        try {
            target.setStatusLinkOperatorToRole(arg0, arg1, arg2);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findMqSchedulerSheetByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        MQSchedulerSheet result;
        try {
            result = target.findMqSchedulerSheetByKey(arg0);
        } catch (NoSuchMqSchedulerSheetException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchMqSchedulerSheetEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchMqSchedulerSheetException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,MQSchedulerSheet.class);
        return out;
    }
    
    private OutputStream addMqSchedulerSheet(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        MQSchedulerSheet arg0 = (MQSchedulerSheet) in.read_value(MQSchedulerSheet.class);
        try {
            target.addMqSchedulerSheet(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateMqSchedulerSheet(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        MQSchedulerSheet arg0 = (MQSchedulerSheet) in.read_value(MQSchedulerSheet.class);
        try {
            target.updateMqSchedulerSheet(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeMqSchedulerSheet(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeMqSchedulerSheet(arg0);
        } catch (NoSuchMqSchedulerSheetException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchMqSchedulerSheetEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchMqSchedulerSheetException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findMqSchedulerSheetList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        String arg2 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findMqSchedulerSheetList(arg0, arg1, arg2);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOperatorByLogin(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Operator result;
        try {
            result = target.findOperatorByLogin(arg0);
        } catch (NoSuchOperatorException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOperatorEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOperatorException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Operator.class);
        return out;
    }
    
    private OutputStream findOrganizationList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOrganizationList(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOrganizationByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Organization result;
        try {
            result = target.findOrganizationByKey(arg0);
        } catch (NoSuchOrganizationException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOrganizationEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOrganizationException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Organization.class);
        return out;
    }
    
    private OutputStream addOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Organization arg0 = (Organization) in.read_value(Organization.class);
        try {
            target.addOrganization(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Organization arg0 = (Organization) in.read_value(Organization.class);
        try {
            target.updateOrganization(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeOrganization(arg0);
        } catch (NoSuchOrganizationException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOrganizationEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOrganizationException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOwnershipFormTypeList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOwnershipFormTypeList(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOwnershipFormTypeByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        OwnershipFormType result;
        try {
            result = target.findOwnershipFormTypeByKey(arg0);
        } catch (NoSuchOwnershipFormTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOwnershipFormTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOwnershipFormTypeException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,OwnershipFormType.class);
        return out;
    }
    
    private OutputStream addOwnershipFormType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        OwnershipFormType arg0 = (OwnershipFormType) in.read_value(OwnershipFormType.class);
        try {
            target.addOwnershipFormType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateOwnershipFormType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        OwnershipFormType arg0 = (OwnershipFormType) in.read_value(OwnershipFormType.class);
        try {
            target.updateOwnershipFormType(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeOwnershipFormType(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeOwnershipFormType(arg0);
        } catch (NoSuchOwnershipFormTypeException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOwnershipFormTypeEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOwnershipFormTypeException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOrganizationGroupList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOrganizationGroupList(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOrganizationGroupByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        OrganizationGroup result;
        try {
            result = target.findOrganizationGroupByKey(arg0);
        } catch (NoSuchOrganizationGroupException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOrganizationGroupEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOrganizationGroupException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,OrganizationGroup.class);
        return out;
    }
    
    private OutputStream addOrganizationGroup(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        OrganizationGroup arg0 = (OrganizationGroup) in.read_value(OrganizationGroup.class);
        try {
            target.addOrganizationGroup(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateOrganizationGroup(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        OrganizationGroup arg0 = (OrganizationGroup) in.read_value(OrganizationGroup.class);
        try {
            target.updateOrganizationGroup(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeOrganizationGroup(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeOrganizationGroup(arg0);
        } catch (NoSuchOrganizationGroupException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOrganizationGroupEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOrganizationGroupException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOrganizationListByGroup(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOrganizationListByGroup(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream addLinkGroupToOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.addLinkGroupToOrganization(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream deleteLinkGroupToOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.deleteLinkGroupToOrganization(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findAddressListByOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findAddressListByOrganization(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findAddressByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Address result;
        try {
            result = target.findAddressByKey(arg0);
        } catch (NoSuchAddressException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchAddressEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchAddressException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Address.class);
        return out;
    }
    
    private OutputStream addAddress(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Address arg0 = (Address) in.read_value(Address.class);
        try {
            target.addAddress(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateAddress(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Address arg0 = (Address) in.read_value(Address.class);
        try {
            target.updateAddress(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeAddress(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeAddress(arg0);
        } catch (NoSuchAddressException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchAddressEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchAddressException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findProcessTypeList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findProcessTypeList(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOperatorToRoleAccessList__CORBA_WStringValue__CORBA_WStringValue__CORBA_WStringValue(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        String arg2 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOperatorToRoleAccessList(arg0, arg1, arg2);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findGroupListByOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findGroupListByOrganization(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findGovernListByOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findGovernListByOrganization(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findGovernByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Govern result;
        try {
            result = target.findGovernByKey(arg0);
        } catch (NoSuchGovernException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchGovernEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchGovernException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Govern.class);
        return out;
    }
    
    private OutputStream addGovern(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Govern arg0 = (Govern) in.read_value(Govern.class);
        try {
            target.addGovern(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateGovern(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Govern arg0 = (Govern) in.read_value(Govern.class);
        try {
            target.updateGovern(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeGovern(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeGovern(arg0);
        } catch (NoSuchGovernException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchGovernEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchGovernException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findShareholderListByOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findShareholderListByOrganization(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findShareholderByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Shareholder result;
        try {
            result = target.findShareholderByKey(arg0);
        } catch (NoSuchShareholderException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchShareholderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchShareholderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Shareholder.class);
        return out;
    }
    
    private OutputStream addShareholder(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Shareholder arg0 = (Shareholder) in.read_value(Shareholder.class);
        try {
            target.addShareholder(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateShareholder(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Shareholder arg0 = (Shareholder) in.read_value(Shareholder.class);
        try {
            target.updateShareholder(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeShareholder(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeShareholder(arg0);
        } catch (NoSuchShareholderException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchShareholderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchShareholderException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOrganizationListTO(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOrganizationListTO(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOrganizationGroupListTO(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOrganizationGroupListTO(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findManagerListByOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findManagerListByOrganization(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findManagerByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Manager result;
        try {
            result = target.findManagerByKey(arg0);
        } catch (NoSuchManagerException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchManagerEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchManagerException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Manager.class);
        return out;
    }
    
    private OutputStream addManager(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Manager arg0 = (Manager) in.read_value(Manager.class);
        try {
            target.addManager(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateManager(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Manager arg0 = (Manager) in.read_value(Manager.class);
        try {
            target.updateManager(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeManager(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeManager(arg0);
        } catch (NoSuchManagerException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchManagerEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchManagerException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOkvedList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOkvedList(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOkvedByKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        Okved result;
        try {
            result = target.findOkvedByKey(arg0);
        } catch (NoSuchOkvedException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOkvedEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOkvedException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Okved.class);
        return out;
    }
    
    private OutputStream addOkved(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Okved arg0 = (Okved) in.read_value(Okved.class);
        try {
            target.addOkved(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream updateOkved(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Okved arg0 = (Okved) in.read_value(Okved.class);
        try {
            target.updateOkved(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream removeOkved(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        try {
            target.removeOkved(arg0);
        } catch (NoSuchOkvedException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOkvedEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOkvedException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOkvedHierarchyList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOkvedHierarchyList(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream deleteLinkOkvedToOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.deleteLinkOkvedToOrganization(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream addLinkOkvedToOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.addLinkOkvedToOrganization(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOkvedListByOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOkvedListByOrganization(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOrganizationByCrmKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Organization result;
        try {
            result = target.findOrganizationByCrmKey(arg0);
        } catch (NoSuchOrganizationException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOrganizationEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOrganizationException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Organization.class);
        return out;
    }
    
    private OutputStream findOkvedListTO(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOkvedListTO(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream updateOrganizationCRM(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Organization arg0 = (Organization) in.read_value(Organization.class);
        try {
            target.updateOrganizationCRM(arg0);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOrganizationListTO_ByGroup(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOrganizationListTO_ByGroup(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream addLinkGroupToOrganizationCRM(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.addLinkGroupToOrganizationCRM(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream deleteLinkGroupToOrganizationCRM(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.deleteLinkGroupToOrganizationCRM(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream addLinkGroupCrmToOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.addLinkGroupCrmToOrganization(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream addLinkGroupCrmToOrganizationCRM(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.addLinkGroupCrmToOrganizationCRM(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream deleteLinkGroupCrmToOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.deleteLinkGroupCrmToOrganization(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream deleteLinkGroupCrmToOrganizationCRM(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.deleteLinkGroupCrmToOrganizationCRM(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream findOrganizationListTO_ByGroupCRM(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOrganizationListTO_ByGroupCRM(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOrganizationGroupByCrmKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        OrganizationGroup result;
        try {
            result = target.findOrganizationGroupByCrmKey(arg0);
        } catch (NoSuchOrganizationGroupException ex) {
            String id = "IDL:com/vtb/_exception/NoSuchOrganizationGroupEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,NoSuchOrganizationGroupException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,OrganizationGroup.class);
        return out;
    }
    
    private OutputStream findGroupListTO_ByOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findGroupListTO_ByOrganization(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findGroupListTO_ByOrganizationCRM(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findGroupListTO_ByOrganizationCRM(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream findOkvedListTO_ByOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        String arg1 = (String) in.read_value(String.class);
        ArrayList result;
        try {
            result = target.findOkvedListTO_ByOrganization(arg0, arg1);
        } catch (ModelException ex) {
            String id = "IDL:com/vtb/_exception/ModelEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,ModelException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ArrayList.class);
        return out;
    }
    
    private OutputStream addLinkOkvedCrmToOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.addLinkOkvedCrmToOrganization(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream deleteLinkOkvedCrmToOrganization(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        try {
            target.deleteLinkOkvedCrmToOrganization(arg0, arg1);
        } catch (MappingException ex) {
            String id = "IDL:com/vtb/_exception/MappingEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,MappingException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
}
